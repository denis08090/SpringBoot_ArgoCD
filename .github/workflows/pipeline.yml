name: Pipeline

on: [push, pull_request]

jobs:
  run-unit-and-integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew test --tests '*.*Unit*'

      - name: Run integration tests
        run: ./gradlew test --tests '*.*Integration*'

  deploy-to-staging-and-run-further-tests:
    runs-on: ubuntu-latest
    needs: run-unit-and-integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'murine'
          java-package: jdk
          check-latest: false
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN
          overwrite-settings: true
          job-status: success
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get project version
        run: echo "PROJECT_VERSION=$(./gradlew -q printVersion)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v4
        with:
          image: ${{ secrets.DOCKER_USERNAME }}/spring
          tag: ${{ env.PROJECT_VERSION }}
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Checkout GitOps repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.actor }}/ArgoCD_GitOps
          token: ${{ secrets.REPOSITORY_ACCESS_TOKEN }}
          ref: main

      - name: Update image tag in values.yml
        run: |
          sed -i "s/tag: .*/tag: ${{ env.PROJECT_VERSION }}/" values_staging.yml

      - name: Commit and push changes to GitOps repository
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git add values_staging.yml
          git commit --allow-empty -m "Deploy ${{ env.PROJECT_VERSION }} to staging"
          git push

  run-newman-tests:
    runs-on: ubuntu-latest
    needs: deploy-to-staging-and-run-further-tests  # Ensure it runs after deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Newman
        run: npm install -g newman

      - name: Run system tests with Newman
        run: newman run api_tests.postman_collection.json


  create_pull_request:
    runs-on: ubuntu-latest
    needs: deploy-to-staging-and-run-further-tests  # Ensure it runs after deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Commit changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m "Commit message" || echo "No changes to commit"
          git push origin HEAD

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.REPOSITORY_ACCESS_TOKEN }}
          branch: "update-production-${{ github.run_id }}"
          title: "Update production image"
          body: "This PR updates the production image."
          commit-message: "Update production image"
          labels: "automated"

  deploy-to-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.actor }}/ArgoCD_GitOps
          token: ${{ secrets.REPOSITORY_ACCESS_TOKEN }}
          ref: main

      - name: Create a new branch for PR
        run: |
          git checkout -b update-production-${{ github.run_number }}

      - name: Update image tag with version from staging in production values.yml
        run: |
          version=$(grep 'tag:' values_staging.yml | awk '{print $2}')
          sed -i "s/tag: .*/tag: $version/" values_production.yml
          git config --global user.email "denis.roos@wiss-edu.ch"
          git config --global user.name "denis08090"
          git add values_production.yml
          git commit --allow-empty -m "Update production image to $version"
          git push origin update-production-${{ github.run_number }}
        shell: /usr/bin/bash -e {0}


